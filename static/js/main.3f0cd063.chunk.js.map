{"version":3,"sources":["actions.js","sagas/ApiErrors.js","sagas/index.js","reducers/weather.ts","reducers/metricSelector.js","reducers/heartBeat.js","reducers/measurementData.js","components/Chip.tsx","components/Weather.js","components/Header.tsx","components/Wrapper.tsx","components/chart/chart.js","components/metricSelection/metricSlector.jsx","components/chartContainer/chartContainer.component.jsx","App.tsx","store/index.js","index.js"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","call","toast","error","takeEvery","actions","ApiErrors","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","handlers","state","c","getWeatherForLocation","handler","type","selectedMetric","payload","before","after","tubingPressure","casingPressure","oilTemp","flareTemp","waterTemp","injValveOpen","measurements","withStyles","theme","root","background","palette","secondary","main","label","color","primary","Chip","client","createClient","url","getWeather","weather","value","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","LinearProgress","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","chartBox","padding","Chart","heartBeat","selectedMetrics","input","metricName","measurementRes","getMeasurements","getLabel","Box","length","ResponsiveContainer","width","minWidth","aspect","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","domain","YAxis","Label","offset","Tooltip","Line","dataKey","stroke","activeDot","r","dot","box","card","display","justifyContent","alignItems","cardContent","paddingBottom","cardTitle","fontSize","formLabel","formControl","marginBottom","formGroup","flexDirection","EOGCheckbox","grey","checked","props","Checkbox","metricArray","MetricSelector","FormControl","component","FormLabel","FormGroup","map","metric","i","isChecked","key","FormControlLabel","control","onChange","Card","CardContent","paper","ChartContainer","heartBeatRes","console","log","Paper","store","rootReducer","combineReducers","weatherReducer","metricReducer","heartBeatReducer","measurementsReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","sagas","forEach","run","createMuiTheme","default","App","CssBaseline","Header","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f0cd063.chunk.js","sourcesContent":["export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\nexport const SELECT_METRIC = \"SELECT_METRIC\";\nexport const GET_HEARTBEAT = \"GET_HEARTBEAT\";\nexport const GET_MEASUREMENTS = \"GET_MEASUREMENTS\";","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n    yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n    yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];","import ApiErrors from \"./ApiErrors\";\n\nexport default [...ApiErrors];","\nimport * as actions from \"../actions\";\n\nconst initialState = {\n  temperatureinCelsius: null,\n  temperatureinFahrenheit: null,\n  description: \"\",\n  locationName: \"\"\n};\n// @ts-ignore\nconst toF = c => (c * 9) / 5 + 32;\n\n// @ts-ignore\nconst weatherDataRecevied = (state, action) => {\n  const { getWeatherForLocation } = action;\n  const {\n    description,\n    locationName,\n    temperatureinCelsius\n  } = getWeatherForLocation;\n\n  return {\n    temperatureinCelsius,\n    temperatureinFahrenheit: toF(temperatureinCelsius),\n    description,\n    locationName\n  };\n};\n\nconst handlers = {\n  // @ts-ignore\n  [actions.WEATHER_DATA_RECEIVED]: weatherDataRecevied\n};\n// @ts-ignore\nexport default (state = initialState, action) => {\n  // @ts-ignore\n  const handler = handlers[action.type];\n  if (typeof handler === \"undefined\") return state;\n  return handler(state, action);\n};","import { SELECT_METRIC } from \"../actions\";\n\nconst initialState = {\n    selectedMetric: 'oilTemp'\n};\n\n\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SELECT_METRIC:\n            // Select single metric\n            return { selectedMetric: action.payload }\n\n        // Select multiple metrics\n        // return {\n        // \t...state,\n        // \t[action.payload]: !state[action.payload]\n        // }\n        default:\n            return state;\n    }\n};","import { GET_HEARTBEAT } from \"../actions\";\n\nconst initialState = {\n    before: null,\n    after: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_HEARTBEAT:\n            return {\n                ...state,\n                before: action.payload,\n                after: action.payload - 1800000 // 1800000 equals 30min.\n            };\n        default:\n            return state;\n    }\n};","import { GET_MEASUREMENTS } from \"../actions\";\n\n\nconst initialState = {\n    tubingPressure: [],\n    casingPressure: [],\n    oilTemp: [],\n    flareTemp: [],\n    waterTemp: [],\n    injValveOpen: []\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_MEASUREMENTS:\n            let measurements = action.payload\n\n            return measurements;\n        default:\n            return state;\n    }\n};","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../actions';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from './Chip';\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch({ type: actions.API_ERROR, error: error.message });\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch({ type: actions.WEATHER_DATA_RECEIVED, getWeatherForLocation });\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Weather from './Weather';\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"pkoru's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Provider, createClient, useQuery } from \"urql\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {ResponsiveContainer} from 'recharts/es6/component/ResponsiveContainer'\nimport {Label} from 'recharts/es6/component/Label'\nimport {CartesianGrid} from 'recharts/es6/cartesian/CartesianGrid'\nimport {Tooltip} from 'recharts/es6/component/Tooltip'\nimport {Line} from 'recharts/es6/cartesian/Line'\nimport {XAxis} from 'recharts/es6/cartesian/XAxis'\nimport {YAxis} from 'recharts/es6/cartesian/YAxis'\nimport {LineChart} from 'recharts/es6/chart/LineChart'\n\n\n\nconst client = createClient({\n    url: \"https://react.eogresources.com/graphql\"\n});\n\nconst measurementQuery = `\nquery($input: MeasurementQuery) {\n  getMeasurements(input: $input) {\n    metric,\n    at,\n    value,\n    unit\n  }                                                                                       \n}\n`;\n\nconst useStyles = makeStyles({\n    chartBox: {\n        // overflowX: \"scroll\",\n        padding: \"5px 0\"\n    }\n});\n\nconst getLabel = metricName => {\n    switch (metricName) {\n        case \"tubingPressure\":\n        case \"casingPressure\":\n            return \"PSI\";\n        case \"oilTemp\":\n        case \"flareTemp\":\n        case \"waterTemp\":\n            return \"F\";\n        case \"injValveOpen\":\n            return \"%\";\n        default:\n            return;\n    }\n};\n\nexport default () => {\n    return (\n        <Provider value={client}>\n            <Chart />\n        </Provider>\n    );\n};\n\nconst Chart = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const heartBeat = useSelector(state => state.heartBeat);\n    const selectedMetric = useSelector(state => state.selectedMetrics.selectedMetric);\n    const measurements = useSelector(state => state.measurements);\n\n    const [measurementRes] = useQuery({\n        query: measurementQuery,\n        variables: {\n            input: {\n                metricName: selectedMetric,\n                before: heartBeat.before,\n                after: heartBeat.after\n            }\n        }\n    });\n\n    const { fetching, data, error } = measurementRes;\n\n    useEffect(() => {\n        if (error) {\n            // console.log(error.message);\n            return;\n        }\n        if (!data) {\n            return;\n        } else {\n            const { getMeasurements } = data;\n            dispatch({\n                type: \"GET_MEASUREMENTS\",\n                payload: getMeasurements\n            });\n        }\n    });\n\n    if (fetching) return <LinearProgress />;\n\n    const metricColors = {\n        tubingPressure: 'green',\n        casingPressure: 'blue',\n        oilTemp: 'purple',\n        flareTemp: 'red',\n        waterTemp: 'teal',\n        injValveOpen: 'black',\n    }\n\n    const label = getLabel(selectedMetric);\n\n    return (\n        <Box className={classes.chartBox}>\n            {measurements.length ? (\n                <ResponsiveContainer width=\"100%\" minWidth={300} aspect={16.0 / 9.0}>\n                    <LineChart\n                        height={600}\n                        data={measurements}\n                        margin={{\n                            top: 5,\n                            right: 5,\n                            left: 5,\n                            bottom: 5\n                        }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis domain={[\"auto\", \"auto\"]} />\n                        <YAxis domain={[\"auto\", \"dataMax + 1\"]}>\n                            <Label value={label} position='insideLeft' offset='-2' />\n                        </YAxis>\n                        <Tooltip />\n                        <Line\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={metricColors[selectedMetric]}\n                            activeDot={{ r: 6 }}\n                            dot={false}\n                        />\n                    </LineChart>\n                </ResponsiveContainer>\n            ) : null}\n        </Box>\n    );\n};","\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { grey } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles({\n    box: {\n        width: \"166px\",\n        margin: \"5px\"\n    },\n    card: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"64px\",\n        padding: \"0\",\n        width: \"85%\"\n    },\n    cardContent: {\n        padding: 0,\n        \"&:last-child\": {\n            paddingBottom: 0\n        }\n    },\n    cardTitle: {\n        fontSize: \"24px\"\n    },\n    formLabel: {\n        paddingBottom: \"20px\"\n    },\n    formControl: {\n        width: \"100%\",\n        marginBottom: \"40px\"\n    },\n    formGroup: {\n        flexDirection: \"row\",\n        justifyContent: \"center\"\n    },\n    tubingPressure: {\n        color: \"green\"\n    },\n    casingPressure: {\n        color: \"blue\"\n    },\n    oilTemp: {\n        color: \"purple\"\n    },\n    flareTemp: {\n        color: \"red\"\n    },\n    waterTemp: {\n        color: \"teal\"\n    },\n    injValveOpen: {\n        color: \"black\"\n    }\n});\n\nconst EOGCheckbox = withStyles({\n    root: {\n        color: grey[500],\n        \"&$checked\": {\n            color: grey[900]\n        }\n    },\n    checked: {}\n})(props => <Checkbox color=\"default\" {...props} />);\n\nconst metricArray = [\n    {\n        value: \"tubingPressure\",\n        label: \"Tubing Pressure\",\n        color: \"\"\n    },\n    {\n        value: \"casingPressure\",\n        label: \"Casing Pressure\"\n    },\n    {\n        value: \"oilTemp\",\n        label: \"Oil Temp\"\n    },\n    {\n        value: \"flareTemp\",\n        label: \"Flare Temp\"\n    },\n    {\n        value: \"waterTemp\",\n        label: \"Water Temp\"\n    },\n    {\n        value: \"injValveOpen\",\n        label: \"Inj Valve Open\"\n    }\n];\n\nconst MetricSelector = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const selectedMetric = useSelector(\n        state => state.selectedMetrics.selectedMetric\n    );\n    const measurements = useSelector(state => state.measurements);\n\n    return (\n        <FormControl component=\"fieldset\" className={classes.formControl}>\n            <FormLabel component=\"legend\" className={classes.formLabel}>\n                Select metric:\n            </FormLabel>\n            <FormGroup className={classes.formGroup}>\n                {metricArray.map((metric, i) => {\n                    const isChecked = metric.value === selectedMetric;\n                    return (\n                        <Box className={classes.box} key={`metric${i}`}>\n                            <FormControlLabel\n                                control={\n                                    <EOGCheckbox\n                                        // checked={selectedMetrics[metric.value]}\n                                        checked={isChecked}\n                                        onChange={() =>\n                                            dispatch({\n                                                type: \"SELECT_METRIC\",\n                                                payload: metric.value\n                                            })\n                                        }\n                                        value={metric.value}\n                                    />\n                                }\n                                label={metric.label}\n                            />\n                            {isChecked ? (\n                                <Card className={classes.card}>\n                                    <CardContent className={classes.cardContent}>\n                                        <Typography className={classes.cardTitle}>\n                      <span className={classes[selectedMetric]}>\n                        {measurements.length ? (\n                            measurements[measurements.length - 1].value\n                        ) : (\n                            <>...</>\n                        )}\n                      </span>\n                                        </Typography>\n                                    </CardContent>\n                                </Card>\n                            ) : null}\n                        </Box>\n                    );\n                })}\n            </FormGroup>\n        </FormControl>\n    );\n};\n\nexport default MetricSelector","\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Provider, createClient, useQuery } from \"urql\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\n// import Typography from \"@material-ui/core/Typography\";\nimport Chart from '../chart/chart';\nimport MetricSelector from '../metricSelection/metricSlector';\n\nconst useStyles = makeStyles({\n    paper: {\n        margin: \"3%\",\n        padding: \"20px\"\n    }\n});\n\nconst client = createClient({\n    url: \"https://react.eogresources.com/graphql\"\n});\n\nconst heartBeatQuery = `\nquery {\n  heartBeat                                                                                                              \n}\n`;\n\nexport default () => {\n    return (\n        <Provider value={client}>\n            <ChartContainer />\n        </Provider>\n    );\n};\n\nconst ChartContainer = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [heartBeatRes] = useQuery({\n        query: heartBeatQuery\n    });\n    const { data, error } = heartBeatRes;\n\n    useEffect(\n        () => {\n            if (error) {\n                console.log(error.message);\n                return;\n            }\n            if (!data) return;\n\n            dispatch({\n                type: \"GET_HEARTBEAT\",\n                payload: data.heartBeat\n            })\n        }\n    );\n\n    return (\n        <Paper className={classes.paper}>\n            <MetricSelector />\n            <Chart />\n        </Paper>\n    );\n}","import React from 'react';\nimport createStore from './store/index';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport NowWhat from './components/NowWhat';\nimport ChartContainer from \"./components/chartContainer/chartContainer.component\";\nimport MetricSelectionComponent from \"./components/metricSelection/metricSlector\";\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        <ChartContainer />\n        {/*<NowWhat />*/}\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\n// @ts-ignore\nimport sagas from '../sagas'\n// @ts-ignore\nimport weatherReducer from '../reducers/weather';\nimport metricReducer from \"../reducers/metricSelector\";\nimport heartBeatReducer from \"../reducers/heartBeat\";\nimport measurementsReducer from \"../reducers/measurementData\";\n\n// const weather = combineReducers(reducers);\n// @ts-ignore\n\nexport default () => {\n  const rootReducer = combineReducers({\n    weather: weatherReducer,\n    selectedMetrics: metricReducer,\n    // @ts-ignore\n    heartBeat: heartBeatReducer,\n    measurements: measurementsReducer\n  })\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\n  // @ts-ignore\n  sagas.forEach(sagaMiddleware.run)\n\n  return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}