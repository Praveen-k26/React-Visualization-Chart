{"version":3,"sources":["actions.js","sagas/ApiErrors.js","sagas/index.js","reducers/weather.ts","reducers/metricSelector.js","reducers/heartBeat.js","reducers/measurementData.js","components/Chip.tsx","components/Weather.js","components/Header.tsx","components/Wrapper.tsx","components/chart/chart.js","components/metricSelection/metricSlector.jsx","components/chartContainer/chartContainer.component.jsx","App.tsx","store/index.js","index.js"],"names":["API_ERROR","apiErrorReceived","watchApiError","action","call","toast","error","takeEvery","actions","ApiErrors","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","handlers","state","c","getWeatherForLocation","handler","type","selectedMetric","payload","before","after","tubingPressure","casingPressure","oilTemp","flareTemp","waterTemp","injValveOpen","measurements","withStyles","theme","root","background","palette","secondary","main","label","color","primary","Chip","client","createClient","url","getWeather","weather","value","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","LinearProgress","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","subscriptionClient","SubscriptionClient","reconnect","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","current_time","Date","valueOf","chartBox","padding","box","width","margin","marginLeft","card","display","justifyContent","alignItems","cardContent","paddingBottom","cardTitle","fontSize","Chart","selectedMetrics","input","metricName","measurementRes","useSubscription","response","newMeasurement","newMeasurementRes","oilTest","filter","measurement","metric","getMeasurements","filteringData","displayData","slice","map","metricColors","getLabel","Box","Card","CardContent","style","fontWeigt","length","ResponsiveContainer","minWidth","aspect","LineChart","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","time","parseInt","toLocaleTimeString","navigator","language","hour","minute","replace","tickCount","scale","domain","YAxis","Label","offset","Tooltip","Line","stroke","activeDot","r","dot","formLabel","formControl","marginBottom","formGroup","flexDirection","EOGCheckbox","grey","checked","props","Checkbox","MetricSelector","metricArrayRes","console","log","arr","getMetrics","item","index","push","Object","keys","x","i","FormControl","component","FormLabel","FormGroup","isChecked","key","FormControlLabel","control","onChange","paper","ChartContainer","heartBeatRes","heartBeat","Paper","store","rootReducer","combineReducers","weatherReducer","metricReducer","heartBeatReducer","measurementsReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","sagas","forEach","run","createMuiTheme","default","App","CssBaseline","Header","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2bac3cb.chunk.js","sourcesContent":["export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\nexport const SELECT_METRIC = \"SELECT_METRIC\";\nexport const GET_HEARTBEAT = \"GET_HEARTBEAT\";\nexport const GET_MEASUREMENTS = \"GET_MEASUREMENTS\";","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n    yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n    yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];","import ApiErrors from \"./ApiErrors\";\n\nexport default [...ApiErrors];","\nimport * as actions from \"../actions\";\n\nconst initialState = {\n  temperatureinCelsius: null,\n  temperatureinFahrenheit: null,\n  description: \"\",\n  locationName: \"\"\n};\n// @ts-ignore\nconst toF = c => (c * 9) / 5 + 32;\n\n// @ts-ignore\nconst weatherDataRecevied = (state, action) => {\n  const { getWeatherForLocation } = action;\n  const {\n    description,\n    locationName,\n    temperatureinCelsius\n  } = getWeatherForLocation;\n\n  return {\n    temperatureinCelsius,\n    temperatureinFahrenheit: toF(temperatureinCelsius),\n    description,\n    locationName\n  };\n};\n\nconst handlers = {\n  // @ts-ignore\n  [actions.WEATHER_DATA_RECEIVED]: weatherDataRecevied\n};\n// @ts-ignore\nexport default (state = initialState, action) => {\n  // @ts-ignore\n  const handler = handlers[action.type];\n  if (typeof handler === \"undefined\") return state;\n  return handler(state, action);\n};","import { SELECT_METRIC } from \"../actions\";\n\nconst initialState = {\n    selectedMetric: 'oilTemp'\n};\n\n\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SELECT_METRIC:\n            // Select single metric\n            return { selectedMetric: action.payload }\n\n        // Select multiple metrics\n        // return {\n        // \t...state,\n        // \t[action.payload]: !state[action.payload]\n        // }\n        default:\n            return state;\n    }\n};","import { GET_HEARTBEAT } from \"../actions\";\n\nconst initialState = {\n    before: null,\n    after: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_HEARTBEAT:\n            return {\n                ...state,\n                before: action.payload,\n                after: action.payload - 1800000 // 1800000 equals 30min.\n            };\n        default:\n            return state;\n    }\n};","import { GET_MEASUREMENTS } from \"../actions\";\n\n\nconst initialState = {\n    tubingPressure: [],\n    casingPressure: [],\n    oilTemp: [],\n    flareTemp: [],\n    waterTemp: [],\n    injValveOpen: []\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_MEASUREMENTS:\n            let measurements = action.payload\n\n            return measurements;\n\n        default:\n            return state;\n    }\n};","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../actions';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from './Chip';\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch({ type: actions.API_ERROR, error: error.message });\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch({ type: actions.WEATHER_DATA_RECEIVED, getWeatherForLocation });\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Weather from './Weather';\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"pkoru's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    Provider,\n    createClient,\n    useQuery,\n    useSubscription,\n    defaultExchanges,\n    subscriptionExchange,\n} from \"urql\";\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport {ResponsiveContainer} from 'recharts/es6/component/ResponsiveContainer'\nimport {Label} from 'recharts/es6/component/Label'\nimport {CartesianGrid} from 'recharts/es6/cartesian/CartesianGrid'\nimport {Tooltip} from 'recharts/es6/component/Tooltip'\nimport {Line} from 'recharts/es6/cartesian/Line'\nimport {XAxis} from 'recharts/es6/cartesian/XAxis'\nimport {YAxis} from 'recharts/es6/cartesian/YAxis'\nimport {LineChart} from 'recharts/es6/chart/LineChart'\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst subscriptionClient = new SubscriptionClient(\"ws://react.eogresources.com/graphql\",{reconnect:true})\n\nconst client = createClient({\n    url: \"https://react.eogresources.com/graphql\",\n    exchanges: [\n        ...defaultExchanges,\n        subscriptionExchange({\n            forwardSubscription: operation => subscriptionClient.request(operation)\n        })]\n});\n\nconst current_time = new Date().valueOf();\n\nconst measurementQuery = `\nquery($input: MeasurementQuery) {\n  getMeasurements(input: $input) {\n    metric,\n    at,\n    value,\n    unit\n  }\n}\n`;\n\nconst newMeasurementSubscription = `\nsubscription {\n    newMeasurement{\n        metric\n        value\n        unit\n        at\n    }\n}\n`\nconst useStyles = makeStyles({\n    chartBox: {\n        // overflowX: \"scroll\",\n        padding: \"5px 0\"\n    },\n    box: {\n        width: \"400px\",\n        margin: \"5px\",\n        marginLeft: \"40%\"\n    },\n    card: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"64px\",\n        padding: \"0\",\n        width: \"85%\"\n    },\n    cardContent: {\n        padding: 0,\n        \"&:last-child\": {\n            paddingBottom: 0\n        }\n    },\n    cardTitle: {\n        fontSize: \"24px\"\n    },\n\n});\n\nconst getLabel = metricName => {\n    switch (metricName) {\n        case \"tubingPressure\":\n        case \"casingPressure\":\n            return \"PSI\";\n        case \"oilTemp\":\n        case \"flareTemp\":\n        case \"waterTemp\":\n            return \"F\";\n        case \"injValveOpen\":\n            return \"%\";\n        default:\n            return;\n    }\n};\n\nexport default () => {\n    return (\n        <Provider value={client}>\n            <Chart />\n        </Provider>\n    );\n};\n\nconst Chart= () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    // const heartBeat = useSelector(state => state.heartBeat);\n    const selectedMetric = useSelector(state => state.selectedMetrics.selectedMetric);\n    // const measurements = useSelector(state => state.measurements);\n\n\n\n\n    const handleSubscription = (measurements = [], response) => {\n        return [response.newMeasurement, ...measurements]\n    }\n\n    const [measurementRes] = useQuery({\n        query: measurementQuery,\n        variables: {\n            input: {\n                metricName: selectedMetric,\n                before: current_time - 1800000,\n                after: current_time\n            }\n        }\n    });\n    const [newMeasurementRes] = useSubscription({\n        query:newMeasurementSubscription\n    },handleSubscription);\n\n    const oilTest = newMeasurementRes.data && newMeasurementRes.data.filter(measurement => measurement.metric === selectedMetric)\n\n    const { data, error } = measurementRes;\n\n    useEffect(() => {\n        if (error) {\n            // console.log(error.message);\n            return;\n        }\n        if (!data) {\n            return;\n        } else {\n            const { getMeasurements } = data;\n            // const { newMeasurement } = oilTest\n            dispatch({\n                type: \"GET_MEASUREMENTS\",\n                payload: getMeasurements\n            });\n        }\n    });\n\n        const filteringData = newMeasurementRes.data && newMeasurementRes.data.filter(measurement => measurement.metric === selectedMetric)\n        const displayData = filteringData && filteringData.slice(0,1).map(measurement => measurement.value)\n\n\n\n    const timeFormatter = (time) => {\n        let date = new Date(parseInt(time));\n        let localeSpecificTime = date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute: '2-digit'});\n        return localeSpecificTime.replace(/:|d+ /, '');\n    }\n\n\n    if (!data) return <LinearProgress />;\n\n    const metricColors = {\n        tubingPressure: 'green',\n        casingPressure: 'blue',\n        oilTemp: 'purple',\n        flareTemp: 'red',\n        waterTemp: 'teal',\n        injValveOpen: 'black',\n    }\n\n    const label = getLabel(selectedMetric);\n\n    return (\n        <>\n            <Box className={classes.box}>\n                <Card className={classes.card}>\n                    <CardContent className={classes.cardContent}>\n                        <Typography className={classes.cardTitle}>\n                            <span style={{ fontWeigt: 'bold', color: metricColors[selectedMetric]}}>{selectedMetric} : </span>\n                      <span style={{ color: metricColors[selectedMetric]}}>\n                          {displayData}\n                      </span>\n                        </Typography>\n                    </CardContent>\n                </Card>\n\n            </Box>\n        <Box className={classes.chartBox}>\n            {oilTest && oilTest.length ? (\n                <ResponsiveContainer width=\"100%\" minWidth={300} aspect={16.0 / 9.0}>\n                    <LineChart\n                        height={600}\n                        data={oilTest}\n                        margin={{\n                            top: 5,\n                            right: 5,\n                            left: 5,\n                            bottom: 5\n                        }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis\n                            dataKey=\"at\"\n                            tickFormatter={timeFormatter}\n                            type={\"number\"}\n                            tickCount='11'\n                            scale=\"auto\"\n                            domain={[\"dataMin, dataMax\"]} />\n                        <YAxis domain={[\"auto\", \"auto\"]} scale=\"auto\" tickCount='15'>\n                            <Label value={label} position='insideLeft' offset='-2' />\n                        </YAxis>\n                        <Tooltip />\n                        <Line\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={metricColors[selectedMetric]}\n                            activeDot={{ r: 6 }}\n                            dot={false}\n                        />\n                    </LineChart>\n                </ResponsiveContainer>\n            ) : null}\n        </Box>\n            </>\n    );\n};","\nimport React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { grey } from \"@material-ui/core/colors\";\nimport {createClient, Provider, useQuery} from \"urql\";\n\nconst useStyles = makeStyles({\n    box: {\n        width: \"166px\",\n        margin: \"5px\"\n    },\n    card: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"64px\",\n        padding: \"0\",\n        width: \"85%\"\n    },\n    cardContent: {\n        padding: 0,\n        \"&:last-child\": {\n            paddingBottom: 0\n        }\n    },\n    cardTitle: {\n        fontSize: \"24px\"\n    },\n    formLabel: {\n        paddingBottom: \"20px\"\n    },\n    formControl: {\n        width: \"100%\",\n        marginBottom: \"40px\"\n    },\n    formGroup: {\n        flexDirection: \"row\",\n        justifyContent: \"center\"\n    },\n    tubingPressure: {\n        color: \"green\"\n    },\n    casingPressure: {\n        color: \"blue\"\n    },\n    oilTemp: {\n        color: \"purple\"\n    },\n    flareTemp: {\n        color: \"red\"\n    },\n    waterTemp: {\n        color: \"teal\"\n    },\n    injValveOpen: {\n        color: \"black\"\n    }\n});\n\nconst EOGCheckbox = withStyles({\n    root: {\n        color: grey[500],\n        \"&$checked\": {\n            color: grey[900]\n        }\n    },\n    checked: {}\n})(props => <Checkbox color=\"default\" {...props} />);\n\nconst client = createClient({\n    url: \"https://react.eogresources.com/graphql\"\n});\n\nconst metricArrayQuery = `\nquery {\n  getMetrics                                                                                                              \n}\n`;\n\nexport default () => {\n    return (\n        <Provider value={client}>\n            <MetricSelector />\n        </Provider>\n    );\n};\n\n\nconst MetricSelector = () => {\n    const [metricArrayRes] = useQuery({\n        query: metricArrayQuery\n    });\n    const { data, error } = metricArrayRes;\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const selectedMetric = useSelector(\n        state => state.selectedMetrics.selectedMetric\n    );\n    // const measurements = useSelector(state => state.measurements);\n\n    useEffect(\n        () => {\n            if (error) {\n                console.log(error.message);\n                return;\n            }\n            if (!data) return;\n            const arr = []\n            data.getMetrics.map((item, index) => {\n                return arr.push({value:item, label:item})\n            })\n            const result = data.getMetrics\n            Object.keys(result).map((item,index) => {\n                return console.log('Object.keys--->', result[item])\n            })\n            console.log('useEffect1-->', data.getMetrics)\n            console.log('arr test', arr)\n            data && data.getMetrics.map((x,i) => {\n                return console.log('checking Checkbo Metric Value-->', x)\n            })\n        }\n    );\n\n\n    return (\n        <FormControl component=\"fieldset\" className={classes.formControl}>\n            <FormLabel component=\"legend\" className={classes.formLabel}>\n                Select metric:\n            </FormLabel>\n            <FormGroup className={classes.formGroup}>\n                {data ? data.getMetrics.map((metric, i) => {\n                    const isChecked = metric === selectedMetric;\n                    return (\n                        <Box className={classes.box} key={`metric${i}`}>\n                            <FormControlLabel\n                                control={\n                                    <EOGCheckbox\n                                        checked={isChecked}\n                                        onChange={() =>\n                                            dispatch({\n                                                type: \"SELECT_METRIC\",\n                                                payload: metric\n                                            })\n\n                                        }\n                                        value={metric}\n                                    />\n                                }\n                                label={metric}\n                            />\n                        </Box>\n                    );\n                }): 'NO DATA'}\n            </FormGroup>\n        </FormControl>\n    );\n};\n\n","\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Provider, createClient, useQuery } from \"urql\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Chart from '../chart/chart';\nimport MetricSelector from '../metricSelection/metricSlector';\n\nconst useStyles = makeStyles({\n    paper: {\n        margin: \"3%\",\n        padding: \"20px\"\n    }\n});\n\nconst client = createClient({\n    url: \"https://react.eogresources.com/graphql\"\n});\n\nconst heartBeatQuery = `\nquery {\n  heartBeat                                                                                                              \n}\n`;\n\nexport default () => {\n    return (\n        <Provider value={client}>\n            <ChartContainer />\n        </Provider>\n    );\n};\n\nconst ChartContainer = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [heartBeatRes] = useQuery({\n        query: heartBeatQuery\n    });\n    const { data, error } = heartBeatRes;\n\n    useEffect(\n        () => {\n            if (error) {\n                console.log(error.message);\n                return;\n            }\n            if (!data) return;\n\n            dispatch({\n                type: \"GET_HEARTBEAT\",\n                payload: data.heartBeat\n            })\n        }\n    );\n\n    return (\n        <Paper className={classes.paper}>\n            <MetricSelector />\n            <Chart />\n        </Paper>\n    );\n}","import React from 'react';\nimport createStore from './store/index';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\n// import NowWhat from './components/NowWhat';\nimport ChartContainer from \"./components/chartContainer/chartContainer.component\";\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        <ChartContainer />\n        {/*<NowWhat />*/}\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\n// @ts-ignore\nimport sagas from '../sagas'\n// @ts-ignore\nimport weatherReducer from '../reducers/weather';\nimport metricReducer from \"../reducers/metricSelector\";\nimport heartBeatReducer from \"../reducers/heartBeat\";\nimport measurementsReducer from \"../reducers/measurementData\";\n\n// const weather = combineReducers(reducers);\n// @ts-ignore\n\nexport default () => {\n  const rootReducer = combineReducers({\n    weather: weatherReducer,\n    selectedMetrics: metricReducer,\n    // @ts-ignore\n    heartBeat: heartBeatReducer,\n    measurements: measurementsReducer\n  })\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\n  // @ts-ignore\n  sagas.forEach(sagaMiddleware.run)\n\n  return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}